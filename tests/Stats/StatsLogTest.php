<?php declare(strict_types=1);

namespace Tests\Torr\Rad\Stats;

use PHPUnit\Framework\TestCase;
use Symfony\Component\Console\Style\SymfonyStyle;
use Torr\Rad\Stats\StatsLog;

final class StatsLogTest extends TestCase
{
	/**
	 *
	 */
	public function testSimple () : void
	{
		$stats = new StatsLog([
			"a" => "A",
			"b" => ["B"],
			"c" => ["C", "C Desc"],
		]);

		$this->assertStatsLog($stats, [
			["<fg=yellow>A</>", 0, null],
			["<fg=yellow>B</>", 0, null],
			["<fg=yellow>C</>", 0, "C Desc"],
		], null);
	}

	/**
	 *
	 */
	public function testSettingLabels () : void
	{
		$stats = new StatsLog([
			"a" => "A",
			"b" => "B",
		]);

		$stats->setLabel("b", "New B");
		$stats->setLabel("c", "New C");

		$this->assertStatsLog($stats, [
			["<fg=yellow>A</>", 0, null],
			["<fg=yellow>New B</>", 0, null],
			["<fg=yellow>New C</>", 0, null],
		], null);
	}

	/**
	 *
	 */
	public function testEmpty () : void
	{
		$stats = new StatsLog();
		$this->assertStatsLog($stats, [], null);
	}


	/**
	 *
	 */
	public function testIncrement () : void
	{
		$stats = new StatsLog([
			"a" => "A",
			"b" => "B",
			"c" => "C",
		]);

		$stats->increment("a");
		$stats->increment("b");
		$stats->increment("a", 10);

		$this->assertStatsLog($stats, [
			["<fg=yellow>A</>", 11, null],
			["<fg=yellow>B</>", 1, null],
			["<fg=yellow>C</>", 0, null],
		], null);
	}


	/**
	 *
	 */
	public function testAutoGenerateLabel () : void
	{
		$stats = new StatsLog([
			"a" => "A",
		]);

		// call in inverse order, but it should be 1) constructor, 2) setLabel, 3) autogenerated
		$stats->increment("c");
		$stats->setLabel("b", "B");

		$this->assertStatsLog($stats, [
			["<fg=yellow>A</>", 0, null],
			["<fg=yellow>B</>", 0, null],
			["<fg=yellow>C</>", 1, null],
		], null);
	}


	/**
	 * Asserts the rendering of the stats log
	 */
	private function assertStatsLog (
		StatsLog $stats,
		array $expectedTable,
		?array $expectedListing
	) : void
	{
		$io = $this->createMock(SymfonyStyle::class);

		$io
			->expects(self::once())
			->method("table")
			->with(["Label", "Ã—", "Description"], $expectedTable);

		if (null !== $expectedListing)
		{
			$io
				->expects(self::once())
				->method("listing")
				->with($expectedListing);
		}

		$stats->render($io);
	}
}
